package edu.caltech.test.nanodb.sqlparse;


import java.io.StringReader;

import antlr.Token;

import edu.caltech.nanodb.sqlparse.NanoSqlLexer;
import edu.caltech.nanodb.sqlparse.NanoSqlParser;


/**
 * This test-case provides some utility functionality that is very useful for
 * exercising the SQL parser and lexer classes generated by ANTLR.  It basically
 * provides simple mechanisms to get a lexer or parser that has been fed a
 * specific test-string.
 */
public class SqlParseTestCase {

    /**
     * Utility method to construct a lexer against the specified token-string.
     */
    protected NanoSqlLexer getLexerForString(String s) {
        StringReader sreader = new StringReader(s);
        NanoSqlLexer lexer = new NanoSqlLexer(sreader);
        return lexer;
    }


    /**
     * Utility method to test the lexer against a test-string containing a
     * single token.  The expected token-type is passed in as well.
     */
    protected void checkLexSingleToken(String testString, int expectedTokenType,
        String expectedString) throws Exception {

        NanoSqlLexer lexer = getLexerForString(testString);
        Token tok = lexer.nextToken();

        assert expectedTokenType == tok.getType() :
            "Lexer token-type " + tok.getType() +
            " doesn't match expected token type " + expectedTokenType + ".";

        assert expectedString.equals(tok.getText()) : "Lexer token-string \"" +
            tok.getText() + "\" doesn't match expected token-string \"" +
            expectedString + "\".";
    }


    /**
     * Utility method to test the lexer against a test-string containing a
     * single token.  The expected token-type is passed in as well.
     */
    protected void checkLexSingleToken(String testString, int expectedTokenType)
        throws Exception {
        checkLexSingleToken(testString, expectedTokenType, testString);
    }


    /**
     * Utility method to construct a parser against the specified command-string.
     */
    protected NanoSqlParser getParserForString(String s) {
        NanoSqlLexer lexer = getLexerForString(s);
        NanoSqlParser parser = new NanoSqlParser(lexer);
        return parser;
    }
}
